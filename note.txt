1. 更新远程代码 到本地
git fetch
本地拉取分支
git checkout -b new_branch
拉取远程分支
git checkout -b serverfix origin/serverfix
跟踪远程分支
git checkout --track origin/serverfix
推送本地分支
git branch dev  # 创建本地分支
git branch  # 查看分支
git push origin dev  # 这样远程仓库也有一个dev分支了

mongodb启动：bin > mongod --dbpath E:\Mongodb\data

语义化版本（semver）即 dependencies、devDependencies 和 peerDependencies 里的如："co": "^4.6.0"。

semver 格式：主版本号.次版本号.修订号。版本号递增规则如下：

主版本号：做了不兼容的 API 修改
次版本号：做了向下兼容的功能性新增
修订号：做了向下兼容的 bug 修正

npm i   是  npm install 简写

package.json 锁定 安装包版本号 ：npm config set save-exact true

运行 npm shrinkwrap 锁定安装包版本号，更保险
npm shrinkwrap 只会生成 dependencies 的依赖，不会生成 devDependencies 的

npm start 等价于 npm run start
npm test 等价于 npm run test


supervisor 修改代码保存后会自动重新启动express
> cnpm i -g supervisor --save
> supervisor --harmony index


//res.render('模板的名字，也就是匹配views下的u.ejs 其作用就是将模板和数据结合生成 html，同时设置响应头中的 Content-Type: text/html，告诉浏览器我返回的是 html，不是纯文本，要按 html 展示')

<% code %>：运行 JavaScript 代码，不输出
<%= code %>：显示转义后的 HTML内容
<%- code %>：显示原始 HTML 内容	
	
express: web 框架
express-session: session 中间件
connect-mongo: 将 session 存储于 mongodb，结合 express-session 使用
connect-flash: 页面通知提示的中间件，基于 session 实现
ejs: 模板
express-formidable: 接收表单及文件的上传中间件
config-lite: 读取配置文件
marked: markdown 解析
moment: 时间格式化
mongolass: mongodb 驱动
objectid-to-timestamp: 根据 ObjectId 生成时间戳
sha1: sha1 加密，用于密码加密
winston: 日志
express-winston: 基于 winston 的用于 express 的日志中间件


app.locals 和 res.locals
优先级：res.render 传入的对象> res.locals 对象 > app.locals 对象，所以 app.locals 和 res.locals 几乎没有区别，都用来渲染模板，
使用上的区别在于：app.locals 上通常挂载常量信息（如博客名、描述、作者信息），res.locals 上通常挂载变量信息，即每次请求可能的值都不一样（如请求者信息，res.locals.user = req.session.user）

form 表单要添加 enctype="multipart/form-data" 属性才能上传文件。

####在阿里云轻量应用服务器创建FTP服务器#####
基于windowserver 2008 r2 服务器
1.下载FileZilla Server安装包；
2.安装后使用密码，创建一个Users实例（cm，使用密码：*****），点击shared folders 后指定所在项目的目录，赋该有权限
3.退出远程，在本地机器安装FileZilla客户端，使用远程服务器IP号，使用cm和密码进行登录，如果不能读取目录，再设置客户端（编辑-》网络配置向导，将模式改为主动模式）
